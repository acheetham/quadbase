<%# Copyright 2011-2012 Rice University. Licensed under the Affero General Public 
    License version 3 or later.  See the COPYRIGHT file for details. %>

<% content_for :after_form do %>

  <%= render :partial => 'shared/mark_it_up' %>

  <% @errors = @question.errors %>

  <% @human_field_names = {:"answer_choices.content" => "Answer text", 
                           :"answer_choices.credit" => "Answer right/wrong", 
                           :"answer_choices" => "Answers",
                           :"question_setup.content" => "Content"} %>

  <%# For the question setup ... %>
  <%= render :partial => "attachable_assets/add_image_dialog",
             :locals => {:attachable => @question.question_setup,
                         :dialog_div_id => "image_dialog_intro",
                         :include_open_insert_close_js => false} %>

  <%# For the question ... %>
  <%= render :partial => "attachable_assets/add_image_dialog",
             :locals => {:attachable => @question,
                         :include_open_insert_close_js => false} %>

  <%# Add the JS glue only once, not twice %>
  <%= render :partial => 'attachable_assets/image_dialog_open_insert_close' %>

<% end %>
   
 <%= f.hidden_field :type, :value => "SimpleQuestion"%>

 <p>You are editing a 
    <%= link_to_help "simple_questions", "simple question",
                     {:height => 400, 
                      :width => 700} %>. 
    Need help <%= link_to_help "formatting", "formatting", 
                                {:include_mathjax => true, 
                                 :height => 400, 
                                 :width =>900} %> your question?</p>

  <% setup_blank = @question.question_setup.content.blank? %>

  <% intro_options = {:style => "#{setup_blank ? 'display:none' : ''}", :id => 'intro_text_block'} %>

  <%= question_edit_block "Introductory Text", intro_options do %>

    <% if @question.is_draft_in_multipart? %>
      <%= @question.question_setup.content_html.html_safe %>
    <% else %>
      <div class="field">
        <%= f.fields_for :question_setup do |setup_form| %>
           <%= setup_form.text_area :content, 
                                    :rows => 8, 
                                    :class => "mark_it_up", 
                                    :style => 'width:100%',
                                    'data-attachable_type'=>'intro' %>
        <% end %>
      </div>
    <% end %>
    
  <% end %> 

  <div>
    <%= link_to_function "Add a common introduction to this question.", 
                         '$("#intro_text_block").show(); $(this).parent().hide();'%> 
    (optional)
    <span style="float:right"><%= link_to_help "question_setup", "What is this?" %></span>
  </div>

  <%= question_edit_block "The Question" do %>
    <span style="float:right">
      <%= link_to_function "Add computer-generated variations", 
                           "$('.code_related').show(); refreshCodeMirrors(); $(this).parent().hide();" %>
    </span>

    <div class="question_edit_subblock" style="margin-top:0px">
      <div id="question_code" class="code_related" style="display:none; clear:both; padding: 8px 0;">
      
      <div class="question_edit_block_subtitle" style="margin-top:-10px">Logic for Computer-Generated Variations<%= link_to_function "Test!", "test();", :style => "float:right; font-style:normal; padding-right:8px" %></div>    
        <% @question.code ||= "// write your logic here " %>
        <%= f.text_area :code, 
                        :class => 'code_editor', 
                        :id => 'the_code_editor', 
                        :style => 'width:100%' %>
                        
        <div style="padding-top:8px"></div>

        <div style="color:#555555; margin: 8px 0">
          In the text field below, <b>list the variables</b> from the logic above that you want to use 
          in this question.  Separate variable names with commas (e.g. "x, speed, y").
        </div>

        <div class="field">
          <%= f.text_field :variables, 
                           :style => "width:100%;   border: #777 1px solid; font-family: courier, monospace; font-size: 14px; height: 24px; padding: 4px;" %> 
        </div>

      <% if false %>
         &nbsp;&nbsp;&nbsp; Logic variables available below:
        [NONE] 
        
        <span id="variable_add_remove_links"> 
        <%= link_to_function "Add", "$('#variable_add_form').show();" %> | <%= link_to_function "Remove" %>
        </span>
        
        <%= f.hidden_field :variables %>
        
        <div id="variable_add_form" style="display:none">
          <%= text_field_tag :new_variables %> <%= link_to_function "Add", "$('#variable_add_remove_links').show();" %>
        </div>
      <% end %>
      
      </div>
    </div>
    
    <div class="question_edit_subblock">
      <div class="question_edit_block_subtitle code_related" style="display:none">Question Text</div>
    
      <div class="field">
        <%= f.text_area :content, :rows => 8, :class => "mark_it_up", :style => 'width:100%', %>
      </div>
    </div>
    
  <% end %>

  <div class="answer_choices">
    <%= f.fields_for :answer_choices do |ac_form| %>
      <%= render 'simple_questions/answer_choice_fields', :f => ac_form %>
    <% end %>
  </div>
  
  <p>   
   <%= link_to_add_fields "Add a multiple-choice answer", 
                          f, 
                          :answer_choices, 
                          "div.answer_choices",
                          {}, {:partial_name => 'simple_questions/answer_choice_fields'} %>
  </p>
 


<style type="text/css">
.CodeMirror-scroll {
   height: auto;
   overflow-y: hidden;
   overflow-x: auto;
   width: 100%;
 }
</style>

<% @include_codemirror = true %>

<% content_for :javascript do %>
  <%= javascript_tag do %>
    var codeMirrorEditors = [];

    $(document).ready(function() {
      initCodeMirror('the_code_editor');
    });
  
    function initCodeMirror(elementId) {
      codeMirrorEditors.push(CodeMirror.fromTextArea(document.getElementById(elementId), 
                              { lineNumbers: true }) );
    }
    
    function refreshCodeMirrors() {
      for (ii = 0; ii < codeMirrorEditors.length; ii++) {
        codeMirrorEditors[ii].refresh();
      }      
    }
    
    function getVariables(variablesString) {
      variablesString = variablesString.replace(/[ \t\r\n]+/g,"");
      return variablesString.split(",");
    }
    
    function runCode(code, variables) {
      var anObject = {
        codeFunction: function() {
          
        }
      }
      
      var innerFunc = function() {
        eval(code);

        results = {};

        for (ii = 0; ii < variables.length; ii++) {
          results[variables[ii]] = eval(variables[ii] + ".toString();");
        }
        console.log(this);
        console.log(Document);
        return results;        
      }
      
      results2 = innerFunc();
      console.log(results2);
      return results2;
    }
    
    function test() {
      alert(codeMirrorEditors[0].getValue());
      runCode(codeMirrorEditors[0].getValue(), getVariables($('#question_variables').val()));
    }
    
  <% end %>
<% end %>
